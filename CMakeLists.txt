cmake_minimum_required(VERSION 2.8)
project( CameraInput )
add_definitions(-D__STDC_CONSTANT_MACROS)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake_modules/")

find_package( FFMPEG REQUIRED )
if (FFMPEG_FOUND)
    message (STATUS "-------- FFMPEG_FOUND ----------" )
    message (STATUS "FFMPEG_INCLUDE_DIRS=${FFMPEG_INCLUDE_DIR}")
    message (STATUS "FFMPEG_LIBRARIES=${FFMPEG_LIBRARIES}")
    message (STATUS "-------- FFMPEG_FOUND ----------" )
    message (STATUS " " )
    include_directories (${FFMPEG_INCLUDE_DIR})
endif(FFMPEG_FOUND)

find_package( OpenCV REQUIRED )
if (OpenCV_FOUND)
    message (STATUS "OpenCV_LIBS=${OpenCV_LIBS}")
endif()
if (OPENCV2_FOUND)
    message (STATUS "-------- OPENCV2_FOUND ----------" )
    message (STATUS "OpenCV_INCLUDE_DIRS=${OPENCV2_PATH}")
    message (STATUS "OPENCV2_LIB_PATH=${OPENCV2_LIB_PATH}")
	message (STATUS "OPENCV2_RELEASE_LIBS=${OPENCV2_RELEASE_LIBS}")
	message (STATUS "OPENCV2_DEBUG_LIBS=${OPENCV2_DEBUG_LIBS}")
	message (STATUS "OPENCV2_LIBS=${OPENCV2_LIBS}")
    message (STATUS "-------- OPENCV2_FOUND ----------" )
    message (STATUS " " )
    include_directories (${OPENCV2_PATH})
endif(OPENCV2_FOUND)

#SET( ENV{FREETYPE_DIR} ${DEVELOPMENT_ROOT}/freetype-2.4.6 )
find_package ( Freetype REQUIRED )
if (FREETYPE_FOUND)
    message (STATUS "-------- FREETYPE_FOUND ----------" )
    message (STATUS "FreeType_INCLUDE_DIRS=${FREETYPE_INCLUDE_DIRS}")
    message (STATUS "FreeType_LIBRARIES=${FREETYPE_LIBRARIES}")
    message (STATUS "-------- FREETYPE_FOUND ----------" )
    message (STATUS " " )
    include_directories (${FREETYPE_INCLUDE_DIRS})
endif(FREETYPE_FOUND)

#set(GTK2_DEBUG true)
find_package(GTK2 2.8 REQUIRED gtk )
if (GTK2_FOUND)
    message (STATUS "-------- GTK2_FOUND ----------" )
    message (STATUS "GTK2_INCLUDE_DIRS=${GTK2_INCLUDE_DIRS}")
	message (STATUS " " )
    message (STATUS "GTK2_LIBRARIES=${GTK2_LIBRARIES}")
    message (STATUS "-------- GTK2_FOUND ----------" )
    message (STATUS " " )
    include_directories (${GTK2_INCLUDE_DIRS})
	add_definitions (${GTK2_DEFINITIONS})
endif(GTK2_FOUND)

find_package(JNI REQUIRED )

if (JNI_FOUND)
    message (STATUS "-------- JNI_FOUND ----------" )
    message (STATUS "JNI_INCLUDE_DIRS=${JNI_INCLUDE_DIRS}")
    message (STATUS "JNI_LIBRARIES=${JNI_LIBRARIES}")
    message (STATUS "-------- JNI_FOUND ----------" )
    message (STATUS " " )
endif(JNI_FOUND)

add_executable( CameraInput CameraInput.cpp )

target_link_libraries (CameraInput ${FFMPEG_LIBRARIES})
target_link_libraries (CameraInput ${OpenCV_LIBS} )
target_link_libraries (CameraInput ${GTK2_LIBRARIES})

